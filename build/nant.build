<project name = "Test" default="all">

<!-- Targets -->
<!-- configure    : Configure the build process environment and properties for paths and such.  -->
<!-- build        : Compiles the solution(s) using msbuild.                                     -->
<!-- test         : Runs the unittests.                                                         -->
<!-- package      : Creates install package(s).                                                 -->

<include buildfile="sub/vs2010.build"/>
<include buildfile="sub/nunit.build"/>

<target name="all" depends="configure,build,test"/>

<target name="clean"/>
<target name="configure" depends="conf.read-build.config,conf.service-messages,conf.dump"/>
<target name="build" depends="build.TheWorks"/>
<target name="test" depends="test.TheWorks"/>

<target name="conf.read-build.config" depends="conf.build">

    <property name="build.number" value="x" overwrite="false"/>
    <echo message="build.number: ${build.number} (after)"/>

    <xmlpeek file="build.config.xml" property="project.name" xpath="/root/project-name"/>
    <xmlpeek file="build.config.xml" property="version.major" xpath="/root/version/major"/>
    <xmlpeek file="build.config.xml" property="version.minor" xpath="/root/version/minor"/>
    <xmlpeek file="build.config.xml" property="version.patch" xpath="/root/version/patch" failonerror="false"/>
    <xmlpeek file="build.config.xml" property="version.rc" xpath="/root/version/rc" failonerror="false"/>
    <xmlpeek file="build.config.xml" property="version.codename" xpath="/root/version/codename" failonerror="false"/>
    
    <property name="version.patch" value="0" overwrite="false"/>

    <property name="version.full" value="${version.major}.${version.minor}.${version.patch}.${build.number}"/>
    <property name="version.full" value="${version.full}-rc${version.rc}" if="${property::exists('version.rc')}"/>
    <property name="version.full" value="${version.full} (${version.codename})" if="${property::exists('version.codename')}"/>
    <property name="version.full" value="${version.full} [${build.configuration}]" if="${build.configuration == 'Debug'}"/>
    
    <echo message="Project: ${project.name} version ${version.full}"/>

</target>

<target name="conf.service-messages">
    <echo message="##teamcity[buildNumber '${version.major}.${version.minor}.${version.patch}.{build.number}']"/>
</target>

<target name="conf.build">
    <property name="build.configuration" value="Debug" overwrite="false"/>
    <property name="folder.project" value="${path::get-directory-name(directory::get-current-directory())}"/>
    
    <echo message="folder.project: ${folder.project}"/>
</target>

<target name="conf.dump">
    <echo message="Build process:"/>
    <echo message="- Product       : ${project.name}"/>
    <echo message="- Version       : ${version.full}"/>
    <echo message="- Configuration : ${build.configuration}"/>
    <echo message="WARNING: This build is not suitable for production! It was not build by the build server (build.number = x)"
          if="${build.number == 'x'}"/>
    <echo message="WARNING: This build is not suitable for production! It is build in debug configuration (build.configuration = Debug)"
          if="${build.configuration == 'Debug'}"/>
    <echo message="WARNING: This build is not suitable for production! It is a release candidate for testing (version.rc not empty)"
          if="${property::exists('version.rc')}"/>
    <echo message="##teamcity[buildStatus status='SUCCESS' text='{build.status.text} Not suitable for production!']"
           if="${build.number == 'x' or ${build.configuration == 'Debug' or ${property::exists('version.rc')}}"/>
</target>

<target name="build.TheWorks" depends="msvs.setup">
    <exec program="msbuild" commandline="/nologo /target:Build /p:Configuration=${build.configuration} ${folder.project}\src\TheWorks.sln"/>
</target>

<target name="test.TheWorks" depends="nunit.setup">
    <nunit2>
        <formatter type="Plain" />    
        <test>
            <assemblies>
                <include name="../src/**/bin/${build.configuration}/*Tests.dll"/>
            </assemblies>
        </test>
    </nunit2>
</target>





<target name="env-setup">
    <if test="${not property::exists('build.number')}">
        <echo message="Local build!"/>
        <property name="build.number" value="0.0"/>
    </if>
</target>



</project>
